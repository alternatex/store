{"name":"Store","tagline":"A lightweight datastore wrapper","body":"Quickstart\r\n-------------\r\n\r\n### Embedding\r\n\r\n#### Require.js\r\n```javascript\r\nrequire([\"store\"], function(Store) {\r\n  // ...\r\n});\r\n```\r\n\r\n#### HTML\r\n```html\r\n<script src=\"src/client/store.js\"></script>\r\n```\r\n\r\n### Store\r\n\r\n#### Defaults\r\n\r\nDefaults are modified as follows:\r\n\r\n```javascript\r\nStore.configure({ \r\n  url: \"http://localhost/datastore.php\", \r\n  ttl: 36000\r\n});\r\n```\r\n**Note**\r\n\r\n`configure()` alters the prototype object, hence modifications are propagated to instances on property level given that the respective instance properties have not been modified previously.\r\n\r\n#### Create \r\n\r\n```javascript\r\nvar objectStore = new Store({ namespace: 'object' });\r\n```\r\n\r\n### Object\r\n\r\n#### Create \r\n\r\n##### Preset \r\n```javascript\r\nvar object = objectStore.create({ \r\n  country: 'USA', \r\n  firstname: 'Stephen', \r\n  lastname: 'Colbert' \r\n}); \r\n```\r\n\r\n##### Barebone\r\n```javascript\r\nvar object = objectStore.create(); \r\nobject.set('country', 'USA');\r\nobject.set('firstname', 'Jon'); \r\nobject.set('lastname', 'Stewart'); \r\n```\r\n\r\n#### Get\r\n\r\n##### List\r\n```javascript\r\nobjectStore.list();\r\n```\r\n\r\n##### Single\r\n```javascript\r\nobjectStore.get('8c0c1ff0-d0fe-38b7-376a-b0b1d53bd557');\r\n```\r\n\r\n#### Store\r\n\r\n##### Instance\r\n```javascript\r\nobject.update();\r\n```\r\n\r\n##### Datastore\r\n```javascript\r\nobjectStore.update(object);\r\n```\r\n\r\n#### Remove\r\n\r\n##### Instance\r\n```javascript\r\nobject.remove();\r\n```\r\n\r\n##### Datastore\r\n```javascript\r\nobjectStore.remove(object);\r\n```\r\n\r\n### Access Control\r\n...\r\n\r\n#### Auth \r\n...\r\n\r\n#### User\r\n...\r\n\r\n### Summary\r\n```html\r\n<script src=\"src/client/store.js\"></script>\r\n<script>\r\n(function(){\r\n\r\n  // local variables\r\n  var object, objectId, objectStore, objects;\r\n\r\n  // configure storage defaults \r\n  Store.configure({ \r\n    url: \"http://localhost/store/docs/examples/server.php\", \r\n    ttl: 36000\r\n  });\r\n\r\n  // create new storage\r\n  objectStore = new Store({ namespace: 'object' });\r\n\r\n  // create new storage bound object\r\n  object = objectStore.create({ \r\n    country: 'US', \r\n    firstname: 'Stephen', \r\n    lastname: 'Colbert' \r\n  });\r\n  \r\n  // update on insert \r\n  object.update().done(function(object){\r\n    \r\n    // wrap json object\r\n    object = objectStore.create(object);\r\n\r\n    // update properties\r\n    object.set('firstname', 'Jon');\r\n    object.set('lastname', 'Stewart');\r\n\r\n    // extract\r\n    objectId = object.get('id');\r\n\r\n    // update object\r\n    object.update().done(function(object){        \r\n\r\n        // fetch object w/previously retrieved objectId\r\n        objectStore.get(objectId).done(function(object){\r\n\r\n           // wrap json object\r\n           object = objectStore.create(object);\r\n\r\n           // say hi\r\n           console.log(object.get('firstname') + \" \" + object.get('lastname'));\r\n        });\r\n    });\r\n  });\r\n\r\n  // collect update promises\r\n  objects = [];\r\n\r\n  // create some objects\r\n  Store.times(10, function(count){\r\n\r\n    // store update promises\r\n    objects.push(objectStore.create({ \r\n      title: 'No.' + count,       \r\n      abstract: 'Lorem Ipsum [...]',       \r\n      text: 'Lorem Ipsum Si Amet They Say',             \r\n      author: 'me', \r\n      lastmod: new Date().getTime()\r\n    }).update());\r\n  });\r\n\r\n  // fetch all objects & register callback \r\n  objects = objectStore.list();\r\n\r\n  // when all objects have been retrieved\r\n  Store.when(objects).done(function(objects){\r\n\r\n    // log each\r\n    objects.forEach(function(object, index){\r\n      console.log(index, object);\r\n    });\r\n    \r\n  });\r\n\r\n  // fetch object \r\n  object = objectStore.get(objectId);\r\n\r\n  // process fetched object\r\n  Store.when(object).done(function(object){  \r\n\r\n    // execute on success  \r\n    console.log(\"done\", object);  \r\n\r\n  }).fail(function(objects){    \r\n\r\n    // execute on fail\r\n    console.log(\"fail\", objects);    \r\n\r\n  }).always(function(objects){    \r\n\r\n    // always execute this block\r\n    console.log(\"always\", objects);\r\n\r\n  });\r\n\r\n})();\r\n</script>\r\n```\r\n\r\nRepositories\r\n-------------\r\n\r\n### PHP Object Store\r\n\r\nStores data using PHPs `serialize()` function. Supports embedding binary data base64 encoded.\r\n\r\n**Limitations** \r\n\r\nBuilt with prototyping in mind. Won't scale.\r\n\r\nDocumentation\r\n-------------\r\n- [API Docs](https://github.com/alternatex/store/blob/stable/docs/api/index.html)\r\n- [Usage](https://github.com/alternatex/store/blob/stable/docs/index.md)\r\n\r\nRoadmap\r\n-------------\r\n- Ajax Requests\r\n  - Proxy (CS)\r\n  - File Uploads\r\n- Client Queries (Memory/Localstorage)\r\n  - Remote List Â» Local Get\r\n- Documentation / Examples\r\n  - Stores\r\n  - Settings\r\n  - Todo-App\r\n- Security (CSRF & friends)\r\n- Test Coverage + 1\r\n\r\nWishlist\r\n-------------\r\n- JSON Schema\r\n- REST Client\r\n  - Node.js\r\n  - PHP\r\n- Repositories \r\n  - Riak\r\n  - JCR\r\n  - MongoDB\r\n  - Redis\r\n  - PHPCR\r\n  - HTML5 Stores (*)\r\n- Synchronization\r\n- HTML5 FileSystem API\r\n- Filters Client/Server\r\n\r\nLicense\r\n-------------\r\nReleased under two licenses: new BSD, and MIT. You may pick the\r\nlicense that best suits your development needs.\r\n\r\nhttps://raw.github.com/alternatex/store/stable/LICENSE\r\n","google":"UA-41532678-2","note":"Don't delete this file! It's used internally to help with page regeneration."}