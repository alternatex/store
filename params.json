{"name":"Store","tagline":"A lightweight datastore wrapper","body":"Quickstart\r\n-------------\r\n\r\n### Embedding\r\n\r\n#### Require.js\r\n```html\r\n<script>\r\nrequire([\"store\"], function(Store) {\r\n  // ...\r\n});\r\n</script>\r\n```\r\n\r\nSee examples for details\r\n\r\n#### ...\r\n```html\r\n<script src=\"src/client/store.js\"></script>\r\n<script>\r\n  // ...\r\n</script>\r\n```\r\n\r\n### Defaults\r\n\r\nDefaults are modified as follows:\r\n\r\n```javascript\r\nStore.configure({ \r\n  url: \"http://localhost/datastore.php\", \r\n  ttl: 36000\r\n});\r\n```\r\n**Note**\r\n\r\n`configure()` alters the prototype object, therefore modifications are propagated to it's instances on property level given that the respective instance property has not been modified directly yet.\r\n\r\n### Create Store\r\n```javascript\r\nvar objectStore = new Store({ namespace: 'object' });\r\n```\r\n\r\n### Create Object\r\n\r\n#### Preset \r\n```javascript\r\nvar object = objectStore.create({ \r\n  country: 'USA', \r\n  firstname: 'Stephen', \r\n  lastname: 'Colbert' \r\n}); \r\n```\r\n\r\n#### Barebone\r\n```javascript\r\nvar object = objectStore.create(); \r\nobject.set('country', 'USA');\r\nobject.set('firstname', 'John'); \r\nobject.set('lastname', 'Stewart'); \r\n```\r\n\r\n### Get Object\r\n\r\n#### List\r\n```javascript\r\nobjectStore.list();\r\n```\r\n\r\n#### Single\r\n```javascript\r\nobjectStore.get('8c0c1ff0-d0fe-38b7-376a-b0b1d53bd557');\r\n```\r\n\r\n### Store Object\r\n\r\n#### Instance\r\n```javascript\r\nobject.update();\r\n```\r\n\r\n#### Datastore\r\n```javascript\r\nobjectStore.update(object);\r\n```\r\n\r\n#### Datastore w/ arbitrary object\r\n```javascript\r\nobjectStore.update({ name: 'XXXXX', type: 'XXXXX', rank: 'XXXXX' });\r\n```\r\n\r\n### Remove Object\r\n\r\n#### Instance\r\n```javascript\r\nobject.remove();\r\n```\r\n\r\n#### Datastore\r\n```javascript\r\nobjectStore.remove(object);\r\n```\r\n\r\n### Summary\r\n```html\r\n<script src=\"src/client/store.js\"></script>\r\n<script>\r\n(function(root){\r\n\r\n  // local variables\r\n  var objectStore, objects, object;\r\n\r\n  // configure storage defaults \r\n  Store.configure({ \r\n    url: \"http://localhost/store/docs/examples/store.php\", \r\n    ttl: 36000\r\n  });\r\n\r\n  // create new storage\r\n  objectStore = new Store({ namespace: 'object' });\r\n\r\n  // create new storage bound object\r\n  object = objectStore.create({ \r\n    country: 'US', \r\n    firstname: 'Stephen', \r\n    lastname: 'Colbert' \r\n  });\r\n  \r\n  // insert object\r\n  object = object.update();\r\n\r\n  // update on insert\r\n  Store.when(object).done(function(object){\r\n  \r\n    // update properties\r\n    object.set('firstname', 'John');\r\n    object.set('lastname', 'Stewart');\r\n\r\n    // update object\r\n    object.update();\r\n\r\n  });\r\n\r\n  // collect update promises\r\n  objects = [];\r\n\r\n  // create some objects\r\n  Store.times(10, function(count){\r\n    objects.push(objectStore.create({ \r\n      title: 'No.' + count,       \r\n      abstract: 'Lorem Ipsum [...]',       \r\n      text: 'Lorem Ipsum Si Amet They Say',             \r\n      author: 'me', \r\n      lastmod: new Date().getTime()\r\n    }).update());\r\n  });\r\n\r\n  // upon promises fulfillment\r\n  Store.when(objects)\r\n    .done(function(objects){\r\n      console.log(\"done\", objects);\r\n    })\r\n    .fail(function(objects){\r\n      console.log(\"fail\", objects);\r\n    })\r\n    .always(function(objects){\r\n      console.log(\"always\", objects);\r\n    });  \r\n\r\n  // fetch all objects & register callback \r\n  objects = objectStore.list();\r\n\r\n  // process fetched objects\r\n  Store.when(objects).done(function(objects){\r\n    objects.forEach(function(object, index){\r\n      console.log(index, object);\r\n    });\r\n  });\r\n\r\n  // fetch object \r\n  object = objectStore.get('8c0c1ff0-d0fe-38b7-376a-b0b1d53bd557');\r\n\r\n  // process fetched object\r\n  Store.when(object).done(function(object){\r\n    console.log(\"object\", object);\r\n  });\r\n});\r\n</script>\r\n```\r\n\r\nRepositories\r\n-------------\r\n\r\n### PHP Store\r\n\r\nStores data using PHPs object serialization features for marshalling. Supports embedding files base64 encoded.\r\n\r\n**Limitations** \r\n\r\nBuilt with prototyping in mind. Won't scale.\r\n\r\nDocumentation\r\n-------------\r\n- [API Docs](https://github.com/alternatex/store/blob/master/docs/api/index.html)\r\n- [Usage](https://github.com/alternatex/store/blob/master/docs/index.md)\r\n\r\nRoadmap\r\n-------------\r\n- Adapters/Stores/Repositories\r\n  - Remote/PHP Plain\r\n- AMD/CommonJS \r\n- Custom Form Handler\r\n- CSRF Prevention w/Handshake+x *\r\n- Documentation\r\n- Test Coverage\r\n\r\nWishlist\r\n-------------\r\n- REST Client/PHP-Adapter\r\n- Filters JS/PHP\r\n- Repositories Node.js Plain & PHPCR\r\n- HTML5 FileSystem API\r\n- JSON Schema\r\n\r\nLicense\r\n-------------\r\nReleased under two licenses: new BSD, and MIT. You may pick the\r\nlicense that best suits your development needs.\r\n\r\nhttps://raw.github.com/alternatex/store/master/LICENSE","google":"UA-41532678-2","note":"Don't delete this file! It's used internally to help with page regeneration."}