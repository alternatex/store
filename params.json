{"name":"Store","tagline":"A rapid prototype development utility  ","body":"\r\nOverview\r\n-------------\r\n\r\nStore essentially provides CRUD operations for arbitrary objects. \r\nOperations are executed asynchronously using custom deferred objects to handle callbacks.\r\n\r\nStorage Types\r\n-------------\r\n\r\n### Local\r\n\r\n#### JS\r\n...\r\n\r\n### Remote\r\n\r\n#### PHP\r\n...\r\n\r\n#### JS\r\n...\r\n\r\nUsage Examples\r\n-------------\r\n\r\n### JavaScript\r\n\r\n```html\r\n<script src=\"src/store.js\"></script>\r\n<script>\r\n\r\n// scope\r\n(function(root){\r\n\r\n  // configure defaults\r\n  Store.config({ \r\n    url: \"http://localhost/datastore.php\", // server side handler *\r\n    ttl: 1000 // timeout in ms\r\n  });\r\n\r\n  // create new store `articles`\r\n  var articleStore = new Store({ namespace: 'article' });\r\n\r\n  // create arbitrary object bound to `articles` store\r\n  var article = articleStore.create({ country: 'CA' }); // set multiple properties in constructor\r\n  article.set('firstname', 'Stephen'); // or set property one\r\n  article.set('lastname', 'Colbert'); // by one\r\n\r\n  // store `article`\r\n  article.update();\r\n\r\n  // create arbitrary object bound to `articles` store\r\n  var article = articleStore.create(); \r\n  article.set('country', 'UK');\r\n  article.set('firstname', 'John'); \r\n  article.set('lastname', 'Oliver'); \r\n  \r\n  // store `article`\r\n  article.update();\r\n\r\n  // store `article` xxx\r\n  var updateArticle = articleStore.update(article, function callback(){\r\n    console.log('shalalalala');\r\n  });\r\n\r\n  // register handlers \r\n  Store.when(updateArticle).done(function(){\r\n    // ...\r\n  }).fail(function(){\r\n    // ...\r\n  }).always(function(){\r\n    // ...\r\n  });\r\n\r\n  // edit `article`\r\n  article.setData({\r\n    id: 'fd4a722f-b2d4-0a7a-a6dd-198369e1abc5', // article.get('id'),\r\n    country: 'US', \r\n    firstname: 'John', \r\n    lastname: 'Stewart'\r\n  }); // or bulk em' post object initialization\r\n\r\n  // store `article`\r\n  article.update();  \r\n\r\n  // remove `article`\r\n  article.remove();\r\n\r\n  // test\r\n  Store.when(articleStore.list(), function(articles){\r\n    assert(articles.length, 0);\r\n  });\r\n\r\n  // create some stores\r\n  ['author', 'article', 'magazine', 'publisher'].forEach(\r\n    function(context){\r\n      root[context+'Datastore'] = new Store({ namespace: context });\r\n    }\r\n  );\r\n\r\n  // update promises\r\n  var updateArticles = [];\r\n\r\n  // create 10 articles\r\n  Store.times(10, function(count){\r\n\r\n    // create & store\r\n    updateArticles.push(articleStore.create({ \r\n      \r\n      // article\r\n      title: 'No.' + i,       \r\n      abstract: 'Lorem Ipsum [...]',       \r\n      text: 'Lorem Ipsum Si Amet They Say',             \r\n      \r\n      // history \r\n      author: 'me', \r\n      lastmod: new Date().getTime()\r\n    }).update());\r\n\r\n  });\r\n\r\n  // when article bulk creation processed\r\n  Store.when(updateArticles).done(function(){\r\n    // ...\r\n  }).fail(function(){\r\n    // ...\r\n  }).always(function(){\r\n    // ...\r\n  });\r\n\r\n  // fetch all articles & register callback \r\n  Store.when(articleStore.list()).done(function(articles){\r\n\r\n    // do stuff\r\n    articles.forEach(function(article, index){\r\n      console.log(index, article);\r\n    });\r\n\r\n  });\r\n\r\n  // fetch article \r\n  var article = articleStore.get('8c0c1ff0-d0fe-38b7-376a-b0b1d53bd557');\r\n\r\n  // remove article\r\n  article.remove();\r\n\r\n  // ...\r\n\r\n})(this);\r\n</script>\r\n```\r\n\r\n### HTML\r\n\r\n```html\r\n<form method=\"POST\" action=\"datastore.php\">\r\n  <input type=\"hidden\" name=\"namespace\" value=\"article\"/>\r\n  <input type=\"hidden\" name=\"instance[id]\" value=\"a5b1da03-c0d1-5f49-19e4-de94bb266d2e\"/>\r\n  <input type=\"text\" name=\"instance[firstname]\" value=\"firstname\"/>\r\n  <input type=\"text\" name=\"instance[lastname]\" value=\"lastname\"/>\r\n  <button data-action=\"remove\">Remove</button>\r\n  <button data-action=\"update\">Update</button>\r\n</form>\r\n```\r\n\r\n### JavaScript File Upload\r\n\r\n```html\r\n<script>\r\n  // create container\r\n  var form = new FormData();\r\n   \r\n  // set namespace\r\n  form.append('namespace', 'article');\r\n      \r\n  // set file\r\n  var body = '<a id=\"a\"><b id=\"b\">hey!</b></a>';\r\n  var blob = new Blob([body], { type: 'text/xml' });\r\n  form.append('xmlfile', blob);\r\n   \r\n  // store\r\n  var request = new XMLHttpRequest();\r\n  request.open('POST', 'http://localhost/datastore.php');\r\n  request.send(form);\r\n</script>\r\n```\r\n\r\n### HTML File Upload\r\n\r\n```html\r\n<form method=\"POST\" action=\"datastore.php\" enctype=\"multipart/form-data\">\r\n  <input type=\"hidden\" name=\"namespace\" value=\"article\"/>\r\n  <input type=\"hidden\" name=\"instance[id]\" value=\"55ff1e53-0bab-f317-d1d2-7e119fce405e9\"/>\r\n  <input type=\"file\" name=\"instance[document]\" />\r\n  <input type=\"file\" name=\"instance[audio]\" />\r\n  <input type=\"file\" name=\"instance[video]\" />\r\n  <input type=\"file\" name=\"instance[image]\" />\r\n  <button data-action=\"remove\">Remove</button>\r\n  <button data-action=\"update\">Update</button>\r\n</form>\r\n```\r\n\r\nDocumentation\r\n-------------\r\n- Client\r\n- Server\r\n  - JS\r\n  - PHP\r\n\r\nRoadmap\r\n-------------\r\n- Docs\r\n- Test Coverage++\r\n- AMD/CommonJS\r\n- Abstract Stores \r\n  - Extract Ajax Handler\r\n  - Localstorage (TTL)\r\n- JSON Schemas\r\n- Underscore.js Templating\r\n\r\nLicense\r\n-------------\r\nReleased under two licenses: new BSD, and MIT. You may pick the\r\nlicense that best suits your development needs.\r\n\r\nhttps://raw.github.com/alternatex/store/master/LICENSE","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}